# Default values for webapp.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

provision:
  jaeger: true

jaeger:
  provisionDataStore:
    cassandra: false
  allInOne:
    enabled: true # for dev/test purposes!
  storage:
    type: none
  agent:
    enabled: false
  collector:
    enabled: false
  query:
    enabled: false

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

container:
  name: ""

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: k8smaestro/shipy-webapp
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.2"

environment:
  - name: ASPNETCORE_ENVIRONMENT
    value: Production
  - name: OTEL_EXPORTER_JAEGER_AGENT_HOST
    value: "shipy-jaeger-agent.shipy.svc.cluster.local"
  - name: OTEL_EXPORTER_JAEGER_AGENT_PORT
    value: "6831"
  - name: OTEL_EXPORTER_JAEGER_ENDPOINT
    value: "http://shipy-jaeger-query.shipy.svc.cluster.local:14268"
  - name: APIServiceLocations__CustomerManagementAPI
    value: "customermanagementapi.shipy.svc.cluster.local:5100"
  - name: APIServiceLocations__ShipManagementAPI
    value: "shipmanagementapi.shipy.svc.cluster.local:5000"
  - name: APIServiceLocations__WorkshopManagementAPI
    value: "workshopmanagementapi.shipy.svc.cluster.local:5200"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 7000

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  requests:
    memory: 64Mi
    cpu: 64m
  limits:
    memory: 128Mi
    cpu: 256m

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  enabled: false
  path: ""
  port: ""
readinessProbe:
  enabled: false
  path: ""
  port: ""

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
